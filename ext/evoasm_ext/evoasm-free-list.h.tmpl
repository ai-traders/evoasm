#pragma once

#include <stdint.h>
#include "evoasm-error.h"

$includes

#if $embed > 0
#  define $S_DATA(free_list) (free_list->data != NULL ? free_list->data : free_list->_data)
#else
#  define $S_DATA(free_list) (free_list->data)
#endif

#define $S_NULL_IDX ((uint$w_t)-1)

typedef uint$w_t $s_index;

typedef struct $s {
  $s_index capa;
  $s_index len;
  $s_index first_free;
  $s_index last_free;
  $e *data;

#if $embed > 0
  $e _data[$embed];
#endif
} $s;

static inline uint32_t
$s_get_index($s *free_list, $e *e) {
  return (uint32_t)(e - $S_DATA(free_list));
}

static inline $e *
$s_get($s *free_list, $s_index index) {
#if 0
  if(index >= free_list->capa) {
    return NULL;
  }
  return $S_DATA(free_list)[index].free ? NULL : &$S_DATA(free_list)[index];
#endif
  return &$S_DATA(free_list)[index];
}

evoasm_success _$s_grow($s *free_list);

static inline evoasm_success
$s_push($s *free_list, $e **ee, $s_index *ridx) {
  if(free_list->first_free == $S_NULL_IDX) {
    if(!_$s_grow(free_list)) {
      return false;
    }
  }

  {
    $e *entry = &$S_DATA(free_list)[free_list->first_free];

    $s_index idx = free_list->first_free;

    // used up last free slot
    if(entry->next_free == $S_NULL_IDX){
      assert(idx == free_list->last_free);
      free_list->last_free = $S_NULL_IDX;
    }

    free_list->first_free = entry->next_free;

    entry->free = false;
    entry->next_free = $S_NULL_IDX;

    free_list->len++;

    *ee = entry;
    if(ridx) {
      *ridx = idx;
    }
    return true;
  }
}

void $s_clear($s *free_list, uint32_t start, uint32_t end);
evoasm_success $s_init($s *free_list, $s_index capa);
$e *$s_delete($s *free_list, $e *e);
void $s_destroy($s *free_list);
$e * $s_data($s *free_list);
